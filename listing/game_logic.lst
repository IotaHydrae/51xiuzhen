C51 COMPILER V9.00   GAME_LOGIC                                                            12/13/2020 11:43:40 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE GAME_LOGIC
OBJECT MODULE PLACED IN .\out\game_logic.obj
COMPILER INVOKED BY: D:\Program Files (x86)\keil\C51\BIN\C51.EXE src\game_logic.c LARGE BROWSE INCDIR(.\lib;.\src\input)
                    - DEBUG OBJECTEXTEND PRINT(.\listing\game_logic.lst) OBJECT(.\out\game_logic.obj)

line level    source

   1          #include "game_engine.h"
   2          #include "head.h"
   3          #include "input/encoder.h"
   4          #include "oled.h"
   5          #define PAGE_SIZE 3
   6          /* game page */
   7          struct section xdata page[PAGE_SIZE];
   8          struct section data current_section;
   9          /*struct section xdata start_page;
  10          struct section xdata main_game_page;
  11          struct section xdata attribute; */
  12          
  13          struct option data current_line;
  14          /* player property */
  15          struct entity data player;
  16          
  17          static bit btn_flag = 0;
  18          
  19          void Game_Init(void)
  20          {
  21   1          /* 初始化实体属性 */
  22   1          player = MakeEntity(10,5,100);
  23   1          /* 初始化首页 */
  24   1          page[0].line1 = MakeOption(1, "", NORMAL, CENTER);
  25   1          page[0].line2 = MakeOption(2, "Start Game", NORMAL, CENTER);
  26   1          page[0].line3 = MakeOption(3, "Continue Game", NORMAL, CENTER);
  27   1          page[0].line4 = MakeOption(4, "Help", INVERT, CENTER);
  28   1      
  29   1          /*start_page = MakeSection(line1,line2,line3,line4);
  30   1              start_page.name = "start";*/
  31   1              page[0].name ="start";
  32   1              page[0].line2.next = "main";
  33   1      
  34   1      
  35   1          /* 游戏主界面 */
  36   1          page[1].line1 = MakeOption(1, "Attribute", INVERT, CENTER);
  37   1          page[1].line2 = MakeOption(2, "Backpack", NORMAL, CENTER);
  38   1          page[1].line3 = MakeOption(3, "Cave", NORMAL, CENTER);
  39   1          page[1].line4 = MakeOption(4, "Discover", NORMAL, CENTER);
  40   1          //main_game_page = MakeSection(line1,line2,line3,line4);
  41   1              page[1].name  ="main";
  42   1              page[1].line1.next = "attribute";
  43   1      
  44   1          /* 属性 */
  45   1          page[2].line1 = MakeOption(1, "Damage", NORMAL, LEFT);
  46   1          page[2].line2 = MakeOption(2, "Defense", NORMAL, LEFT);
  47   1          page[2].line3 = MakeOption(3, "Health", NORMAL, LEFT);
  48   1          page[2].line4 = MakeOption(4, "-----", NORMAL, LEFT);
  49   1          //attribute = MakeSection(line1,line2,line3,line4);
  50   1              page[2].name = "attribute";
  51   1      
  52   1          /* Backpack */
  53   1          /* Cave */
  54   1          /* Discover */
C51 COMPILER V9.00   GAME_LOGIC                                                            12/13/2020 11:43:40 PAGE 2   

  55   1      
  56   1          /* 页面指向 */
  57   1              current_section=page[0];
  58   1      }
  59          
  60          void Game_Start()
  61          {
  62   1          Show_Game_Menu(current_section);
  63   1      }
  64          
  65          struct section entrySection(struct option line)
  66          {
  67   1              unsigned char *name, i;
  68   1              name = line.next;
  69   1              for(i=0;i<PAGE_SIZE;i++)
  70   1              {
  71   2                      if(name == page[i].name)
  72   2                      {
  73   3                              Hide_Game_Menu(current_section);
  74   3                              current_section=page[i];
  75   3                              Show_Game_Menu(current_section);
  76   3                      }
  77   2              }
  78   1                              
  79   1      }
*** WARNING C173 IN LINE 79 OF SRC\GAME_LOGIC.C: missing return-expression
  80          
  81          void Game_Loop()
  82          {
  83   1          unsigned char ec11_res;
  84   1              unsigned char which_line_selected;
  85   1              unsigned char line_number = 0;
  86   1              
  87   1              //get encoder dat
  88   1          ec11_res = Encoder_Key_Scan();
  89   1          
  90   1      //pre option
  91   1      
  92   1              /*current_line = findWitchIsSelected(current_section);
  93   1              which_line_selected = current_line.which;
  94   1              switch(which_line_selected)
  95   1              {
  96   1                      case 1:line_number=0;break;
  97   1                      case 2:line_number=2;break;
  98   1                      case 3:line_number=4;break;
  99   1                      case 4:line_number=6;break;
 100   1                      default:break;
 101   1              }*/
 102   1              if(ec11_res=='L' || ec11_res=='R')
 103   1              {
 104   2                      if(current_section.line1.isSelected==(unsigned char)-1)
 105   2                      {
 106   3                              which_line_selected=current_section.line1.which;
 107   3                              current_section.line1.isSelected=(unsigned char)1;
 108   3                              OLEDPrint(0,0,current_section.line1.text,current_section.line1.alignment,current_section.line1.isSelect
             -ed);
 109   3                      }
 110   2                      if(current_section.line2.isSelected==(unsigned char)-1)
 111   2                      {
 112   3                              which_line_selected=current_section.line2.which;
 113   3                              current_section.line2.isSelected=(unsigned char)1;
 114   3                              OLEDPrint(2,0,current_section.line2.text,current_section.line2.alignment,current_section.line2.isSelect
C51 COMPILER V9.00   GAME_LOGIC                                                            12/13/2020 11:43:40 PAGE 3   

             -ed);
 115   3                      }
 116   2                      if(current_section.line3.isSelected==(unsigned char)-1)
 117   2                      {
 118   3                              which_line_selected=current_section.line3.which;
 119   3                              current_section.line3.isSelected=(unsigned char)1;
 120   3                              OLEDPrint(4,0,current_section.line3.text,current_section.line3.alignment,current_section.line3.isSelect
             -ed);
 121   3                      }
 122   2                      if(current_section.line4.isSelected==(unsigned char)-1)
 123   2                      {
 124   3                              which_line_selected=current_section.line4.which;
 125   3                              current_section.line4.isSelected=(unsigned char)1;
 126   3                              OLEDPrint(6,0,current_section.line4.text,current_section.line4.alignment,current_section.line4.isSelect
             -ed);
 127   3                      }       
 128   2              }
 129   1                      
 130   1              if(ec11_res=='L')
 131   1              {
 132   2                      which_line_selected = clacNextOption(current_section, which_line_selected, ec11_res);
 133   2              }
 134   1              else if(ec11_res=='R')
 135   1              {
 136   2                      which_line_selected = clacNextOption(current_section, which_line_selected, ec11_res);
 137   2              }
 138   1      
 139   1              if(ec11_res=='L' || ec11_res=='R')
 140   1              {
 141   2                      switch(which_line_selected)
 142   2                      {
 143   3                              case (unsigned char)1:
 144   3                              {
 145   4                                      current_section.line1.isSelected=(unsigned char)-1;
 146   4                                      //OLEDPrint(0,0,current_section.line1.text, current_section.line1.alignment,CLEAR);
 147   4                                      OLEDPrint(0,0,current_section.line1.text, current_section.line1.alignment,current_section.line1.isSele
             -cted);
 148   4                                      break;
 149   4                              }
 150   3                              case (unsigned char)2:
 151   3                              {
 152   4                                      current_section.line2.isSelected=(unsigned char)-1;
 153   4                                      //OLEDPrint(2,0,current_section.line2.text, current_section.line2.alignment,CLEAR);
 154   4                                      OLEDPrint(2,0,current_section.line2.text, current_section.line2.alignment,current_section.line2.isSele
             -cted);
 155   4                                      break;
 156   4                              }
 157   3                              case (unsigned char)3:
 158   3                              {
 159   4                                      current_section.line3.isSelected=(unsigned char)-1;
 160   4                                      //OLEDPrint(4,0,current_section.line3.text, current_section.line3.alignment,CLEAR);
 161   4                                      OLEDPrint(4,0,current_section.line3.text, current_section.line3.alignment,current_section.line3.isSele
             -cted);
 162   4                                      break;
 163   4                              }
 164   3                              case (unsigned char)4:
 165   3                              {
 166   4                                      current_section.line4.isSelected=(unsigned char)-1;
 167   4                                      //OLEDPrint(6,0,current_section.line4.text, current_section.line4.alignment,CLEAR);
 168   4                                      OLEDPrint(6,0,current_section.line4.text, current_section.line4.alignment,current_section.line4.isSele
             -cted);
 169   4                                      break;
C51 COMPILER V9.00   GAME_LOGIC                                                            12/13/2020 11:43:40 PAGE 4   

 170   4                              }
 171   3                              default:break;
 172   3                      }
 173   2              }
 174   1      
 175   1          //enter option
 176   1          if(btn_flag==1)
 177   1          {
 178   2                      struct option line1;
 179   2              btn_flag=0;
 180   2                      line1=findWitchIsSelected(current_section);
 181   2                      entrySection(line1);
 182   2          }
 183   1          
 184   1      }
 185          void int3_Routine(void) interrupt INT_INT3
 186          {
 187   1          btn_flag = 1;
 188   1      }
*** WARNING C290 IN LINE 79 OF SRC\GAME_LOGIC.C: missing return value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1138    ----
   CONSTANT SIZE    =    113    ----
   XDATA SIZE       =    126      25
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
